plugins {
    id 'java-library'
    id 'com.netflix.nebula.optional-base' version '9.0.0'
}

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.netflix.nebula.optional-base'

ext.graalVMVersion = "24.2.2"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

dependencies {
    api 'org.jbibtex:jbibtex:1.0.20'
    api "org.antlr:antlr4-runtime:${libs.versions.antlr.get()}"
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.apache.commons:commons-text:1.14.0'
    implementation 'org.yaml:snakeyaml:2.4', optional

    testImplementation 'commons-io:commons-io:2.20.0'
    testImplementation 'org.citationstyles:styles:25.4'
    testImplementation 'org.citationstyles:locales:25.4'
    testImplementation "org.graalvm.sdk:graal-sdk:$graalVMVersion"
    testImplementation "org.graalvm.js:js:$graalVMVersion"

    // compile-time-only dependency to jackson annotations to avoid
    // warnings during javadoc generation
    compileOnly "com.fasterxml.jackson.core:jackson-annotations:2.+"
    testCompileOnly "com.fasterxml.jackson.core:jackson-annotations:2.+"
}

tasks.register('generateSources') {
    inputs.files fileTree(dir: projectDir, includes: ['templates/*', 'grammars/*'])
    outputs.files fileTree(dir: 'src-gen', includes: ['**/*.java', '**/*.dat'])
    doLast {
        SourceGenerator sg = new SourceGenerator(project)
        sg.renderTemplates()
        sg.renderGrammars()
        sg.generateVersionFile()
    }
}

tasks.register('cleanGeneratedSources', Delete) {
    delete 'src-gen'
}

// include generated sources
sourceSets.main.java.srcDirs 'src-gen/main/java'
sourceSets.main.resources.srcDirs 'src-gen/main/resources'

tasks['compileJava'].dependsOn(generateSources)
tasks['processResources'].dependsOn(generateSources)
tasks['sourcesJar'].dependsOn(generateSources)
tasks['clean'].dependsOn(cleanGeneratedSources)

jar {
    // include license into jar
    from new File(project.rootDir, 'LICENSE.txt')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'citeproc-java'
                packaging = 'jar'
                description = 'A Citation Style Language (CSL) Processor for Java.'
                url = 'https://michelkraemer.com'

                scm {
                    url = 'scm:git:git://github.com/michel-kraemer/citeproc-java.git'
                    connection = 'scm:git:git://github.com/michel-kraemer/citeproc-java.git'
                    developerConnection = 'scm:git:git://github.com/michel-kraemer/citeproc-java.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'michel-kraemer'
                        name = 'Michel Kraemer'
                        email = 'michel@undercouch.de'
                        url = 'https://michelkraemer.com'
                    }
                }
            }
        }
    }
}

// sign all artifacts
signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

tasks.withType(Sign).configureEach {
    // only sign release artifacts and not snapshots
    onlyIf { isReleaseVersion }
}

