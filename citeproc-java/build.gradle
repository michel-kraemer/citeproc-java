buildscript {
    dependencies {
        classpath 'org.apache.commons:commons-lang3:3.4'
    }
}

plugins {
    id "de.undercouch.download" version "4.0.0"
    id "nebula.optional-base" version "5.0.3"
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'nebula.optional-base'

import org.apache.commons.lang3.SystemUtils

// citeproc version 1.1.206
ext.citeprocJsSHA = 'd2ca79088b97c87ccc51ae2d798d6c9c3238f840'
ext.citeprocJsUrlBase = "https://raw.githubusercontent.com/Juris-M/citeproc-js/${ext.citeprocJsSHA}/"
ext.citeprocJsUrl = ext.citeprocJsUrlBase + 'citeproc.js'
ext.citeprocZip = ext.citeprocJsSHA + '.zip'
ext.citeprocZipUrl = 'https://github.com/Juris-M/citeproc-js/archive/' + ext.citeprocZip
ext.citeprocTestSuiteZip = '25e6a1e213ff776d5ccd7928ccbadf0566ea176d.zip'
ext.citeprocTestSuiteUrl = 'https://github.com/citation-style-language/test-suite/archive/' + ext.citeprocTestSuiteZip

ext.graalVMVersion = "19.2.0.1"

def getV8Dependency() {
    def arch = System.getProperty('os.arch')
    def dep = null
    if (SystemUtils.IS_OS_WINDOWS) {
        dep = 'win32_x86'
        if (arch.equals('amd64')) {
            dep += '_64'
        }
    } else if (SystemUtils.IS_OS_MAC && (arch.equals('amd64') || arch.equals('x86_64'))) {
        dep = 'macosx_x86_64'
    } else if (SystemUtils.IS_OS_LINUX && arch.equals('amd64')) {
        dep = 'linux_x86_64'
    }
    if (dep == null) {
        logger.error("Could not find V8 runtime compatible to this system")
        return null
    }
    return 'com.eclipsesource.j2v8:j2v8_' + dep + ':4.8.0'
}

configurations {
    // define a configuration for compile-time-only dependencies
    provided
}

dependencies {
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.apache.commons:commons-text:1.8'
    compile 'org.jbibtex:jbibtex:1.0.17'
    compile 'org.antlr:antlr4-runtime:4.5.3'
    compile 'org.yaml:snakeyaml:1.17', optional

    compile "org.graalvm.sdk:graal-sdk:$graalVMVersion"
    compile "org.graalvm.js:js:$graalVMVersion"

    if (getV8Dependency() != null) {
        provided getV8Dependency()
    }
    
    testCompile 'org.fusesource.jansi:jansi:1.14'
    testCompile 'org.citationstyles:styles:1.0.1-SNAPSHOT'
    testCompile 'org.citationstyles:locales:1.0.1-SNAPSHOT'
    testCompile 'com.carrotsearch:junit-benchmarks:0.7.2'
}

task downloadCiteprocJs(type: Download) {
    acceptAnyCertificate true
    src citeprocJsUrl
    dest new File(projectDir, "src-gen/main/resources/de/undercouch/citeproc/citeproc.js")
    overwrite false
}

task generateSources(dependsOn: downloadCiteprocJs) {
    inputs.files fileTree(dir: projectDir, includes: [ 'templates/*', 'grammars/*',
        'src/main/resources/de/undercouch/citeproc/*.js',
        'src-gen/main/resources/de/undercouch/citeproc/*.js' ])
    outputs.files fileTree(dir: 'src-gen', includes: [ '**/*.java', '**/*.dat' ])
    doLast {
        SourceGenerator sg = new SourceGenerator(project)
        sg.renderTemplates()
        sg.renderGrammars()
        sg.filterScripts()
        sg.generateVersionFile()
    }
}

task cleanGeneratedSources(type: Delete) {
    delete 'src-gen'
}

task downloadTestSuite(type: Download) {
    src citeprocTestSuiteUrl
    dest new File(buildDir, "test-suite/${citeprocTestSuiteZip}")
    compress false
    overwrite false
}

task downloadCiteprocZip(type: Download) {
    acceptAnyCertificate true
    src citeprocZipUrl
    dest new File(buildDir, "test-suite/${citeprocZip}")
    overwrite false
}

task extractCiteprocZip(type: Copy, dependsOn: downloadCiteprocZip) {
    from(zipTree(file(downloadCiteprocZip.dest))) {
        // exclude tests for non-standard features
        exclude '**/fixtures/local/*'
    }
    into new File(buildDir, "test-suite/extracted/")
    eachFile { fcp ->
        // strip off first directory
        fcp.relativePath = new RelativePath(!fcp.file.isDirectory(),
                fcp.relativePath.segments[1..-1] as String[])
    }
    includeEmptyDirs = false
}

task extractTestSuite(type: Copy, dependsOn: [ downloadTestSuite, extractCiteprocZip ]) {
    from zipTree(file(downloadTestSuite.dest))
    into new File(buildDir, "test-suite/extracted/tests/fixtures/std")
    eachFile { fcp ->
        // strip off first directory
        fcp.relativePath = new RelativePath(!fcp.file.isDirectory(),
                fcp.relativePath.segments[1..-1] as String[])
    }
    includeEmptyDirs = false
}

task runTestSuite(dependsOn: [ extractTestSuite, testClasses ]) {
    doLast {
        def tr = new CSLTestSuite(project, new File(buildDir, 'test-suite/extracted'))
        tr.compile()
        tr.fix()
        tr.run()
    }
}

// include generated sources
sourceSets.main.java.srcDirs 'src-gen/main/java'
sourceSets.main.resources.srcDirs 'src-gen/main/resources'

// include compile-time-only dependencies
sourceSets.main.compileClasspath += configurations.provided
eclipse.classpath.plusConfigurations << configurations.provided

tasks['compileJava'].dependsOn(generateSources)
tasks['eclipseClasspath'].dependsOn(generateSources)
tasks['clean'].dependsOn(cleanGeneratedSources)

jar {
    // include license into jar
    from new File(project.rootDir, 'LICENSE.txt')
}

javadoc {
    // add compile-time-only dependencies
    classpath += configurations.provided
}

// define artifacts for upload
artifacts {
    archives jar
    archives packageJavadoc
    archives packageSources
}

// sign all artifacts
signing {
    required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

// remove test dependencies and runtime dependencies
// from configuration-to-scope mapping
// this also removes them from the maven pom file
conf2ScopeMappings.mappings.remove(configurations.testCompile)
conf2ScopeMappings.mappings.remove(configurations.runtime)

uploadArchives {
    repositories {
        mavenDeployer {
            // sign artifacts before upload
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            
            // upload to sonatype OSS
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: this.hasProperty('sonatypeUsername') ? sonatypeUsername : '',
                    password: this.hasProperty('sonatypePassword') ? sonatypePassword : '')
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: this.hasProperty('sonatypeUsername') ? sonatypeUsername : '',
                    password: this.hasProperty('sonatypePassword') ? sonatypePassword : '')
            }
            
            // pom file details
            pom.project {
               name 'citeproc-java'
               packaging 'jar'
               description 'A Citation Style Language (CSL) Processor for Java.'
               url 'http://www.michel-kraemer.com'
 
               scm {
                   url 'scm:git:git://github.com/michel-kraemer/citeproc-java.git'
                   connection 'scm:git:git://github.com/michel-kraemer/citeproc-java.git'
                   developerConnection 'scm:git:git://github.com/michel-kraemer/citeproc-java.git'
               }
 
               licenses {
                   license {
                       name 'The Apache Software License, Version 2.0'
                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                       distribution 'repo'
                   }
               }
 
               developers {
                   developer {
                       id 'michel-kraemer'
                       name 'Michel Kraemer'
                       email 'michel@undercouch.de'
                   }
               }
           }
        }
    }
}
